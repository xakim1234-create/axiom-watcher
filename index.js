// index.js
import puppeteer from "puppeteer";
import fetch from "node-fetch";

// ====== CONFIG ======
const PAGE_URL  = process.env.PAGE_URL  || "https://axiom.trade/pulse";
const CDN_HOST  = process.env.CDN_HOST  || "axiomtrading.sfo3.cdn.digitaloceanspaces.com";
const API_URL   = process.env.API_URL;                 // –≤–∞—à Vercel /api/mints
const BATCH_MS  = +(process.env.BATCH_MS || 5000);     // –ø–µ—Ä–∏–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏
const CHROME    = "/opt/render/.cache/puppeteer/chrome/linux-131.0.6778.204/chrome-linux64/chrome";

// ====== GUARDS ======
if (!API_URL) {
  console.error("‚ùå Set API_URL env (your Vercel endpoint)");
  process.exit(1);
}

// ====== STATE ======
const queue   = new Set();
const seenReq = new Set();

// ====== UTILS ======
function extractMintFromUrl(u) {
  try {
    const last = u.split("/").pop().split("?")[0].split("#")[0];
    const dot  = last.indexOf(".");
    return dot === -1 ? last : last.slice(0, dot);
  } catch {
    return null;
  }
}

async function flush() {
  if (queue.size === 0) return;
  const mints = Array.from(queue);
  queue.clear();
  try {
    await fetch(API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ mints }),
    });
    console.log("‚úÖ Flushed mints:", mints);
  } catch (e) {
    console.error("‚ùå Failed to flush:", e);
  }
}

async function gotoWithRetries(page, url, tries = 3) {
  for (let i = 1; i <= tries; i++) {
    try {
      console.log(`üåê goto attempt ${i}/${tries}: ${url}`);
      // –±—ã—Å—Ç—Ä–µ–µ —Å—Ç–∞—Ä—Ç—É–µ—Ç –Ω–∞ Render, —á–µ–º networkidle2
      await page.goto(url, { waitUntil: "domcontentloaded", timeout: 120_000 });
      // –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–≥–æ–Ω, –µ—Å–ª–∏ —Å–µ—Ç—å –¥–µ—Ä–≥–∞–µ—Ç—Å—è
      await page.waitForTimeout(2000);
      return;
    } catch (e) {
      console.warn(`‚ö†Ô∏è goto failed (${i}/${tries}):`, e?.message || e);
      if (i === tries) throw e;
    }
  }
}

// ====== MAIN ======
async function run() {
  console.log("üöÄ Launching watcher...");

  const browser = await puppeteer.launch({
    headless: true,
    executablePath: CHROME,
    args: [
      "--no-sandbox",
      "--disable-setuid-sandbox",
      "--disable-dev-shm-usage", // –≤–∞–∂–Ω–æ –¥–ª—è Render
      "--no-zygote",
      "--single-process",
    ],
  });

  const page = await browser.newPage();
  page.setDefaultNavigationTimeout(120_000);
  page.setDefaultTimeout(120_000);

  // –ª–æ–≥–∏—Ä—É–µ–º –≤—Å—ë, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ‚Äî –ø–æ–º–æ–≥–∞–µ—Ç –¥–µ–±–∞–∂–∏—Ç—å
  page.on("console", (msg) => {
    try {
      console.log(`üñ•Ô∏è page: ${msg.type()} ${msg.text()}`);
    } catch {}
  });
  page.on("pageerror", (err) => console.error("üñ•Ô∏è pageerror:", err));

  // –ø–æ–¥–º–µ–Ω–∏–º UA ‚Äî –±–ª–∏–∂–µ –∫ –æ–±—ã—á–Ω–æ–º—É –±—Ä–∞—É–∑–µ—Ä—É
  await page.setUserAgent(
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36"
  );
  await page.setViewport({ width: 1366, height: 768 });

  // ‚¨áÔ∏è –ö–£–ö–ò –ò–ó ENV
  try {
    if (process.env.AXIOM_COOKIES) {
      const cookies = JSON.parse(process.env.AXIOM_COOKIES);
      await page.setCookie(...cookies);
      console.log(`üç™ Injected ${cookies.length} cookies for axiom.trade`);
    } else {
      console.warn("‚ö†Ô∏è No AXIOM_COOKIES provided, login may fail");
    }
  } catch (err) {
    console.error("‚ùå Failed to load cookies:", err);
  }

  // –ø–µ—Ä–µ—Ö–≤–∞—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–¥—ë—Ä–≥–∏–≤–∞–Ω–∏—è mint‚Äô–æ–≤
  await page.setRequestInterception(true);
  page.on("request", (req) => {
    const url = req.url();
    if (seenReq.has(url)) return req.continue();
    seenReq.add(url);

    if (url.includes(CDN_HOST)) {
      const mint = extractMintFromUrl(url);
      if (mint) {
        console.log("üëÄ Found mint:", mint);
        queue.add(mint);
      }
    }

    req.continue();
  });

  // –∑–∞—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ—Ç—Ä–∞—è–º–∏
  await gotoWithRetries(page, PAGE_URL, 3);

  // –ø—Ä–æ–±—É–µ–º —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –º—ã ¬´–≤–Ω—É—Ç—Ä–∏¬ª (–µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç)
  try {
    // –µ—Å–ª–∏ —É –Ω–∏—Ö –µ—Å—Ç—å –∫–∞–∫–æ–π-—Ç–æ ¬´–ø—É–ª—å—Å¬ª-—Å–ø–∏—Å–æ–∫ ‚Äî –ø–æ–¥—Å—Ç—Ä–æ–π –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
    await page.waitForSelector("body", { timeout: 30_000 });
    console.log("üü¢ Page ready (body present). Watching‚Ä¶");
  } catch {
    console.warn("‚ö†Ô∏è body selector not confirmed ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç—å");
  }

  // –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
  setInterval(flush, BATCH_MS);
}

// –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–∞ –æ—à–∏–±–∫–∞—Ö
run().catch((err) => {
  console.error("Watcher error, restart in 5s:", err);
  setTimeout(run, 5000);
});
