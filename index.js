// index.js
import puppeteer from "puppeteer";
import fetch from "node-fetch";

/* ====== ENV ====== */
const PAGE_URL  = process.env.PAGE_URL  || "https://axiom.trade/pulse";
const CDN_HOST  = process.env.CDN_HOST  || "axiomtrading.sfo3.cdn.digitaloceanspaces.com";
const API_URL   = process.env.API_URL;                 // —Ç–≤–æ–π Vercel endpoint
const BATCH_MS  = +(process.env.BATCH_MS || 5000);

// –ü—É—Ç—å –∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É Chrome (Render). –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ ENV CHROME_PATH.
const EXEC_PATH = process.env.CHROME_PATH
  || "/opt/render/.cache/puppeteer/chrome/linux-131.0.6778.204/chrome-linux64/chrome";

if (!API_URL) {
  console.error("‚ùå Set API_URL env (your Vercel endpoint)");
  process.exit(1);
}

/* ====== STATE ====== */
const queue   = new Set();
const seenReq = new Set();

/* ====== UTILS ====== */
function extractMintFromUrl(u) {
  try {
    const last = u.split("/").pop().split("?")[0].split("#")[0];
    const dot  = last.indexOf(".");
    return dot === -1 ? last : last.slice(0, dot);
  } catch {
    return null;
  }
}

async function flush() {
  if (!queue.size) return;
  const mints = Array.from(queue);
  queue.clear();
  try {
    await fetch(API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ mints }),
    });
    console.log("‚úÖ Flushed mints:", mints);
  } catch (e) {
    console.error("‚ùå Failed to flush:", e);
  }
}

/** –Ω–∞–¥—ë–∂–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å —Ä–µ—Ç—Ä–∞—è–º–∏ */
async function gotoWithRetries(page, url, retries = 3, timeout = 45000) {
  let lastErr;
  for (let i = 1; i <= retries; i++) {
    try {
      console.log(`üåê goto attempt ${i}/${retries}: ${url}`);
      await page.goto(url, { waitUntil: ["networkidle2", "domcontentloaded"], timeout });
      return;
    } catch (err) {
      lastErr = err;
      console.warn(`‚ö†Ô∏è goto failed (${i}/${retries}): ${err.message}`);
      await page.waitForTimeout(1500);
    }
  }
  throw lastErr;
}

/** –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫–∏ (–≥–ª–∞–≤–Ω–æ–µ ‚Äî –¥–æ–º–µ–Ω .axiom.trade –¥–ª—è –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤) */
function normalizeAxiomCookies() {
  if (!process.env.AXIOM_COOKIES) return null;
  try {
    let cookies = JSON.parse(process.env.AXIOM_COOKIES);
    cookies = cookies.map((c) => {
      if (c.domain === "axiom.trade") c.domain = ".axiom.trade";
      return c;
    });
    return cookies;
  } catch (e) {
    console.error("‚ùå Failed to parse AXIOM_COOKIES:", e);
    return null;
  }
}

/* ====== MAIN ====== */
async function run() {
  console.log("üöÄ Launching watcher...");

  const launchArgs = ["--no-sandbox", "--disable-setuid-sandbox"];
  if (process.env.PROXY_URL) launchArgs.push(`--proxy-server=${process.env.PROXY_URL}`);

  const browser = await puppeteer.launch({
    headless: true,
    executablePath: EXEC_PATH,
    args: launchArgs,
  });

  const page = await browser.newPage();

  // –í–∫–∞–ª—ã–≤–∞–µ–º –∫—É–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const cookies = normalizeAxiomCookies();
  if (cookies && cookies.length) {
    await page.setCookie(...cookies);
    console.log(`üç™ Injected ${cookies.length} cookies for axiom.trade`);
  } else {
    console.warn("‚ö†Ô∏è No AXIOM_COOKIES provided, login may fail");
  }

  // –ß—É—Ç—å –±–æ–ª–µ–µ —Ç–∏—Ö–∏–π –ª–æ–≥ –æ—à–∏–±–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  page.on("console", (msg) => {
    const t = msg.type();
    if (t === "error" || t === "warning") {
      console.log(`üñ•Ô∏è page: ${t}`, msg.text());
    }
  });
  page.on("pageerror", (err) => console.log("üñ•Ô∏è pageerror:", err.message));
  page.on("requestfailed", (req) =>
    console.log("üñ•Ô∏è requestfailed:", req.url(), req.failure()?.errorText || "")
  );

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏–µ –º–∏–Ω—Ç–æ–≤ –ø–æ CDN
  await page.setRequestInterception(true);
  page.on("request", (req) => {
    try {
      const url = req.url();
      if (seenReq.has(url)) return req.continue();
      seenReq.add(url);

      // –ò—â–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ CDN (webp/png/jpg, —á—Ç–æ–±—ã –æ—Ç—Å–µ—á—å –º—É—Å–æ—Ä)
      if (
        url.includes(CDN_HOST) &&
        (url.endsWith(".webp") || url.endsWith(".png") || url.endsWith(".jpg"))
      ) {
        const mint = extractMintFromUrl(url);
        if (mint) {
          console.log("üëÄ Found mint:", mint, "from", url.slice(0, 140));
          queue.add(mint);
        }
      }
      req.continue();
    } catch {
      req.continue();
    }
  });

  // –°–Ω–∞—á–∞–ª–∞ –∫–æ—Ä–µ–Ω—å (–ø—Ä–æ–≥—Ä–µ—Ç—å —Å–µ—Å—Å–∏—é), –∑–∞—Ç–µ–º /pulse
  await gotoWithRetries(page, "https://axiom.trade", 3);
  await gotoWithRetries(page, PAGE_URL, 3);

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
  setInterval(flush, BATCH_MS);
}

run().catch((err) => {
  console.error("Watcher error, restart in 5s:", err);
  setTimeout(run, 5000);
});
