// axiom-watcher: Pump.fun listener (imagedelivery.net/‚Ä¶/coin-image/<MINT>/‚Ä¶)
import puppeteer from "puppeteer-core";
import fetch from "node-fetch";

const PAGE_URL = process.env.PAGE_URL || "https://pump.fun/advanced/scan";
const API_URL = process.env.API_URL;                 // —Ç–≤–æ–π Vercel endpoint
const BATCH_MS = +(process.env.BATCH_MS || 5000);

// –≥–¥–µ –ª–µ–∂–∏—Ç Chrome –Ω–∞ Render (–º—ã —Å—Ç–∞–≤–∏–º –µ–≥–æ –≤ Start Command)
const CHROME_PATH =
  process.env.PUPPETEER_EXEC_PATH ||
  "/opt/render/.cache/puppeteer/chrome/linux-131.0.6778.204/chrome-linux64/chrome";

if (!API_URL) {
  console.error("‚ùå Set API_URL env (your Vercel endpoint)");
  process.exit(1);
}

// ===== helpers =====
const queue = new Set();
const seenReq = new Set();

function extractMintFromDeliveryUrl(u) {
  try {
    // –æ–∂–∏–¥–∞–µ–º: https://imagedelivery.net/.../coin-image/<MINT>/72x72?... –∏–ª–∏ 128x128...
    const i = u.indexOf("/coin-image/");
    if (i === -1) return null;
    const tail = u.slice(i + "/coin-image/".length);
    // <MINT>/72x72?alpha=true
    const mint = tail.split("/")[0];
    if (!mint || mint.length < 8) return null;
    return mint;
  } catch {
    return null;
  }
}

async function flush() {
  if (queue.size === 0) return;
  const mints = Array.from(queue);
  queue.clear();
  try {
    await fetch(API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ mints }),
    });
    console.log("‚úÖ Flushed mints:", mints.length, mints.slice(0, 5));
  } catch (e) {
    console.error("‚ùå Failed to flush:", e?.message || e);
  }
}

async function gotoWithRetries(page, url, tries = 3) {
  for (let i = 1; i <= tries; i++) {
    try {
      console.log(`üåê goto attempt ${i}/${tries}: ${url}`);
      await page.goto(url, { waitUntil: "networkidle2", timeout: 45_000 });
      return;
    } catch (err) {
      console.warn(`‚ö†Ô∏è goto failed (${i}/${tries}): ${err?.message || err}`);
      // –º–∞–ª–µ–Ω—å–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
      await page.waitForTimeout?.(1500).catch(() => {});
    }
  }
  throw new Error("goto failed after retries");
}

// –º—è–≥–∫–æ–µ –≥–∞—à–µ–Ω–∏–µ –º–æ–¥–∞–ª–æ–∫ + –∂—ë—Å—Ç–∫–∏–π css-—Ñ–æ–ª–±—ç–∫
async function dismissOverlays(page) {
  // 1) –Ω–∞ –≤—Å—è–∫–∏–π: –∫–Ω–æ–ø–∫–∏ ¬´Next / Done / Accept ‚Ä¶¬ª
  const clickers = [
    'button:has-text("Next")',
    'button:has-text("Done")',
    'button:has-text("–ü–æ–Ω—è—Ç–Ω–æ")',
    'button:has-text("Accept all")',
    'button:has-text("Accept All")',
    'button:has-text("Accept")',
    'button:has-text("–ü—Ä–∏–Ω—è—Ç—å")',
    '[aria-label="Close"]',
    'button[aria-label="Close"]',
  ];

  for (const sel of clickers) {
    try {
      const btn = await page.$(sel);
      if (btn) {
        await btn.click({ delay: 50 });
        await page.waitForTimeout?.(200).catch(() => {});
      }
    } catch {}
  }

  // send ESC –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
  try {
    await page.keyboard.press("Escape");
    await page.waitForTimeout?.(200).catch(() => {});
    await page.keyboard.press("Escape");
  } catch {}

  // 2) –∂—ë—Å—Ç–∫–∏–π CSS-—Ñ–æ–ª–±—ç–∫ (—Å–∫—Ä–æ–µ—Ç –ª—é–±—ã–µ overlay/role=dialog)
  await page.addStyleTag({
    content: `
      [role="dialog"], [role="alertdialog"], .modal, .Modal, .DialogOverlay,
      .overlay, .Overlay, .backdrop, .Backdrop, .cookie, .Cookie {
        display: none !important;
        visibility: hidden !important;
        pointer-events: none !important;
      }
      html, body { overflow: auto !important; }
    `,
  }).catch(() => {});
}

async function antiOnboarding(page) {
  // —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–∂–∫–∏ –î–û –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞ –≤—Å—è–∫–∏–π)
  await page.evaluateOnNewDocument(() => {
    try {
      const set = (k, v) => localStorage.setItem(k, typeof v === "string" ? v : JSON.stringify(v));
      // —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–µ–π ‚Äì —Å –∑–∞–ø–∞—Å–æ–º
      set("scanSettingsOnboardingSeen", "true");
      set("scan-onboarding", "done");
      set("cookie_consent", "true");
      set("cookie-consent", "true");
      document.addEventListener("DOMContentLoaded", () => {
        const style = document.createElement("style");
        style.textContent = `
          [role="dialog"], .modal, .overlay, .backdrop { display:none !important; }
          html, body { overflow:auto !important; }
        `;
        document.documentElement.appendChild(style);
      });
    } catch {}
  });
}

async function keepPageAlive(page) {
  // –Ω–µ–±–æ–ª—å—à–æ–π ¬´–¥–∂–∞–Ω–∏—Ç–æ—Ä¬ª: —Ä–∞–∑ –≤ 5 —Å–µ–∫ –≥–∞—Å–∏–º –≤–Ω–µ–∑–∞–ø–Ω—ã–µ –º–æ–¥–∞–ª–∫–∏
  setInterval(() => {
    dismissOverlays(page).catch(() => {});
  }, 5000);
}

// ===== main =====
async function run() {
  console.log("üöÄ Launching watcher (Pump.fun)‚Ä¶");

  const browser = await puppeteer.launch({
    headless: true,
    executablePath: CHROME_PATH,
    args: [
      "--no-sandbox",
      "--disable-setuid-sandbox",
      "--disable-dev-shm-usage",
    ],
  });

  const page = await browser.newPage();
  page.setDefaultNavigationTimeout(60_000);

  await page.setUserAgent(
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131 Safari/537.36"
  );

  await antiOnboarding(page);

  // —Å–ª—É—à–∞–µ–º —Ç–æ–ª—å–∫–æ imagedelivery
  await page.setRequestInterception(true);
  page.on("request", (req) => {
    const url = req.url();
    // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É –≤—Å—ë ‚Äî –Ω–∞–º –≤–∞–∂–Ω–æ —Ç–æ–ª—å–∫–æ ¬´—É—Å–ª—ã—à–∞—Ç—å¬ª URL
    req.continue().catch(() => {});
    if (seenReq.has(url)) return;
    seenReq.add(url);

    if (
      url.startsWith("https://imagedelivery.net/") &&
      url.includes("/coin-image/") &&
      /\/(32|64|72|128|256)x(32|64|72|128|256)/.test(url) // –∏–∫–æ–Ω–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
    ) {
      const mint = extractMintFromDeliveryUrl(url);
      if (mint) {
        queue.add(mint);
        // –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å:
        // console.log("üëÄ mint:", mint);
      }
    }
  });

  await gotoWithRetries(page, PAGE_URL, 3);
  await dismissOverlays(page);
  await keepPageAlive(page);

  // –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π ¬´–ø–∏–Ω–æ–∫¬ª, —á—Ç–æ–±—ã –ª–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å
  setInterval(async () => {
    try {
      await page.evaluate(() => window.scrollTo(0, Math.random() * 1000));
    } catch {}
  }, 10_000);

  setInterval(flush, BATCH_MS);
}

run().catch((err) => {
  console.error("Watcher error, restart in 5s:", err);
  setTimeout(run, 5000);
});
